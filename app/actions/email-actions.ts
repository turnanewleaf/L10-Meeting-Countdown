"use server"

import nodemailer from "nodemailer"

// Server action to send email without exposing environment variables
export async function sendMeetingSummaryEmail({
  to,
  subject,
  summaryText,
  meetingTitle,
  meetingDate,
}: {
  to: string
  subject: string
  summaryText: string
  meetingTitle: string
  meetingDate: string
}) {
  try {
    // Validate email address
    if (!to || !to.includes("@")) {
      return {
        success: false,
        error: "Please provide a valid email address",
      }
    }

    // Create a nodemailer transporter using Microsoft 365
    const transporter = nodemailer.createTransport({
      host: "smtp.office365.com",
      port: 587,
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.MS365_EMAIL,
        pass: process.env.MS365_PASSWORD,
      },
    })

    // Create HTML content for the email
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          h1 { font-size: 20px; color: #333; margin-bottom: 20px; }
          .summary { white-space: pre-wrap; font-family: monospace; background-color: #f5f5f5; padding: 15px; border-radius: 5px; }
          .footer { margin-top: 30px; font-size: 12px; color: #777; }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>${meetingTitle} - Meeting Summary</h1>
          <p>Date: ${meetingDate}</p>
          <div class="summary">${summaryText.replace(/\n/g, "<br>")}</div>
          <div class="footer">
            <p>Generated by L10 Meeting Agenda Timer</p>
          </div>
        </div>
      </body>
      </html>
    `

    // Send the email
    const info = await transporter.sendMail({
      from: process.env.MS365_EMAIL,
      to,
      subject,
      text: summaryText,
      html: htmlContent,
    })

    console.log("Email sent successfully:", info.messageId)

    return {
      success: true,
      message: "Email sent successfully",
      data: { messageId: info.messageId },
    }
  } catch (error) {
    console.error("Error in server-side email sending:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred",
    }
  }
}

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Mail, Download, Copy, Check, AlertCircle, X } from "lucide-react"
import { toast } from "@/components/ui/use-toast"
import { Alert, AlertDescription } from "@/components/ui/alert"
import type { AgendaItem } from "@/types/agenda-types"
import { sendMeetingSummaryEmail } from "@/app/actions/email-actions"

interface ItemTimeData {
  plannedDuration: number
  actualDuration: number
  overTime: number
  completed: boolean
}

interface MeetingSummaryDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  meetingTitle: string
  agenda: AgendaItem[]
  itemTimeData: ItemTimeData[]
  totalElapsed: number
}

// Hard-coded recipient email address
const RECIPIENT_EMAIL = "L10MtgAgendaSummary@turnanewleaf.org"

export function MeetingSummaryDialog({
  open,
  onOpenChange,
  meetingTitle,
  agenda,
  itemTimeData,
  totalElapsed,
}: MeetingSummaryDialogProps) {
  const [copied, setCopied] = useState(false)
  const [emailSending, setEmailSending] = useState(false)
  const [emailSent, setEmailSent] = useState(false)
  const [emailError, setEmailError] = useState<string | null>(null)

  // Don't render anything if not open
  if (!open) return null

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${minutes}:${secs < 10 ? "0" : ""}${secs}`
  }

  const formatDate = () => {
    const now = new Date()
    return now.toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })
  }

  const generateSummaryText = () => {
    let summary = `${meetingTitle} - Meeting Summary\n`
    summary += `Date: ${formatDate()}\n`
    summary += `Total Meeting Duration: ${formatTime(totalElapsed)}\n\n`
    summary += `Agenda Item Summary:\n`
    summary += `--------------------------------------------------\n`
    summary += `Item | Planned | Actual | Over/Under\n`
    summary += `--------------------------------------------------\n`

    agenda.forEach((item, index) => {
      const timeData = itemTimeData[index]
      if (timeData) {
        const planned = formatTime(timeData.plannedDuration)
        const actual = formatTime(timeData.actualDuration)
        let overUnder = ""

        if (timeData.overTime > 0) {
          overUnder = `+${formatTime(timeData.overTime)}`
        } else if (timeData.overTime < 0) {
          overUnder = `-${formatTime(Math.abs(timeData.overTime))}`
        } else {
          overUnder = "On time"
        }

        summary += `${index + 1}. ${item.title} | ${planned} | ${actual} | ${overUnder}\n`
      }
    })

    summary += `--------------------------------------------------\n\n`
    summary += `Generated by L10 Meeting Agenda Timer`

    return summary
  }

  const handleCopyToClipboard = () => {
    const summaryText = generateSummaryText()
    navigator.clipboard
      .writeText(summaryText)
      .then(() => {
        setCopied(true)
        toast({
          title: "Copied to clipboard",
          description: "Meeting summary has been copied to your clipboard",
        })
        setTimeout(() => setCopied(false), 2000)
      })
      .catch((err) => {
        console.error("Failed to copy text: ", err)
        toast({
          title: "Copy failed",
          description: "Could not copy to clipboard",
          variant: "destructive",
        })
      })
  }

  const handleDownload = () => {
    const summaryText = generateSummaryText()
    const blob = new Blob([summaryText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = `${meetingTitle.replace(/\s+/g, "-").toLowerCase()}-summary-${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)

    toast({
      title: "Summary downloaded",
      description: "Meeting summary has been downloaded as a text file",
    })
  }

  const handleSendEmail = async () => {
    // Reset previous state
    setEmailSending(true)
    setEmailError(null)
    setEmailSent(false)

    const summaryText = generateSummaryText()
    const subject = `${meetingTitle} - Meeting Summary (${new Date().toLocaleDateString()})`

    try {
      console.log("Attempting to send email to:", RECIPIENT_EMAIL)

      const result = await sendMeetingSummaryEmail({
        to: RECIPIENT_EMAIL,
        subject,
        summaryText,
        meetingTitle,
        meetingDate: formatDate(),
      })

      console.log("Email send result:", result)

      if (result.success) {
        setEmailSent(true)
        setTimeout(() => setEmailSent(false), 3000)
        toast({
          title: "Email sent",
          description: `Meeting summary has been sent to ${RECIPIENT_EMAIL} (simulated in preview environment)`,
        })
      } else {
        setEmailError(result.error || "Failed to send email")
        toast({
          title: "Email failed",
          description: result.error || "Failed to send email",
          variant: "destructive",
        })
      }
    } catch (error) {
      console.error("Error sending email:", error)
      const errorMessage = error instanceof Error ? error.message : "An error occurred while sending the email"
      setEmailError(errorMessage)
      toast({
        title: "Email failed",
        description: errorMessage,
        variant: "destructive",
      })
    } finally {
      setEmailSending(false)
    }
  }

  // Calculate total planned time
  const totalPlannedTime = itemTimeData.reduce((total, item) => total + item.plannedDuration, 0)

  // Calculate total overtime
  const totalOvertime = itemTimeData.reduce((total, item) => {
    return total + (item.overTime > 0 ? item.overTime : 0)
  }, 0)

  // Determine if we're in development mode
  const isDevelopment = true // Always treat as development in the preview environment

  // Create a completely custom modal that doesn't use the Dialog component
  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/80"
      onClick={() => onOpenChange(false)}
    >
      <div className="bg-white rounded-lg p-4 w-[700px] relative" onClick={(e) => e.stopPropagation()}>
        {/* Close button */}
        <button
          className="absolute right-4 top-4 rounded-sm opacity-70 hover:opacity-100 focus:outline-none"
          onClick={() => onOpenChange(false)}
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </button>

        {/* Header */}
        <div className="pb-0.5">
          <h2 className="text-base font-semibold">Meeting Summary</h2>
        </div>

        {/* Content */}
        <div className="space-y-2 mt-2">
          <div className="space-y-1">
            <h3 className="text-base font-semibold">{meetingTitle}</h3>
            <p className="text-xs text-muted-foreground">{formatDate()}</p>
          </div>

          <div className="grid grid-cols-2 gap-1 p-2 mt-1">
            <div className="border rounded-md p-1.5">
              <div className="text-[10px] text-gray-500">Total Duration</div>
              <div className="text-sm font-mono">{formatTime(totalElapsed)}</div>
            </div>
            <div className="border rounded-md p-1.5">
              <div className="text-[10px] text-gray-500">Total Overtime</div>
              <div className="text-sm font-mono text-red-600">
                {totalOvertime > 0 ? `+${formatTime(totalOvertime)}` : "None"}
              </div>
            </div>
          </div>

          <div className="border rounded-md">
            <div className="bg-gray-50 px-2 py-0.5 font-medium grid grid-cols-4">
              <div className="text-[10px]">Agenda Item</div>
              <div className="text-[10px] text-center">Planned</div>
              <div className="text-[10px] text-center">Actual</div>
              <div className="text-[10px] text-right">Over/Under</div>
            </div>
            <div>
              {agenda.map((item, index) => {
                const timeData = itemTimeData[index]
                if (!timeData) return null

                return (
                  <div
                    key={index}
                    className={`px-2 py-1 grid grid-cols-4 items-center ${
                      index !== agenda.length - 1 ? "border-b border-gray-100" : ""
                    }`}
                  >
                    <div className="text-[10px] font-medium truncate pr-1">
                      {index + 1}. {item.title}
                    </div>
                    <div className="text-[10px] text-center font-mono">{formatTime(timeData.plannedDuration)}</div>
                    <div className="text-[10px] text-center font-mono">{formatTime(timeData.actualDuration)}</div>
                    <div
                      className={`text-[10px] text-right font-mono ${timeData.overTime > 0 ? "text-red-600" : timeData.overTime < 0 ? "text-green-600" : ""}`}
                    >
                      {timeData.overTime > 0
                        ? `+${formatTime(timeData.overTime)}`
                        : timeData.overTime < 0
                          ? `-${formatTime(Math.abs(timeData.overTime))}`
                          : "On time"}
                    </div>
                  </div>
                )
              })}
            </div>
          </div>

          {isDevelopment && (
            <Alert variant="warning" className="bg-yellow-50 border-yellow-200 py-1.5">
              <AlertCircle className="h-3 w-3" />
              <AlertDescription className="text-xs">
                You are in development mode. Email sending will be simulated.
              </AlertDescription>
            </Alert>
          )}

          {emailError && (
            <Alert variant="destructive" className="bg-red-50 border-red-200 py-1.5">
              <AlertCircle className="h-3 w-3" />
              <AlertDescription className="text-xs">{emailError}</AlertDescription>
            </Alert>
          )}
        </div>

        {/* Footer */}
        <div className="flex flex-wrap gap-1 justify-end pt-1 border-t mt-2">
          <Button variant="outline" className="flex items-center gap-1 h-6 text-[10px]" onClick={handleCopyToClipboard}>
            {copied ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
            {copied ? "Copied" : "Copy"}
          </Button>
          <Button variant="outline" className="flex items-center gap-1 h-6 text-[10px]" onClick={handleDownload}>
            <Download className="h-3 w-3" />
            Download
          </Button>
          <Button className="flex items-center gap-1 h-6 text-[10px]" onClick={handleSendEmail} disabled={emailSending}>
            {emailSent ? <Check className="h-3 w-3" /> : <Mail className="h-3 w-3" />}
            {emailSending ? "Sending..." : emailSent ? "Sent" : "Send Email"}
          </Button>
        </div>
      </div>
    </div>
  )
}
